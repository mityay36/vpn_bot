import asyncio
import json
import logging
import os

import config
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (BotCommand, BotCommandScopeDefault, CallbackQuery,
                           FSInputFile, InlineKeyboardButton, InputMediaPhoto,
                           KeyboardButton, Message, ReplyKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from logic import get_data, get_file_from_data, get_payment, get_tunnel_list
from yookassa import Configuration, Payment

# from log import log_user_activity, UserContextFilter


# init
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()

Configuration.account_id = config.MARKET_ID
Configuration.secret_key = config.YOKASSA_API_KEY


async def set_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/update", description="–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


@dp.message(Command("update"))
async def start_command(message: Message):

    await message.delete()

    if True:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
                [
                    KeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                    KeyboardButton(text="–û –±–æ—Ç–µ")
                ],
                [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")]
            ],
            resize_keyboard=True
        )
        msg = await message.answer(
            "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=keyboard
        )
        await asyncio.sleep(config.SLEEP_TIME)

        await msg.delete()

    else:
        await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@dp.message(Command("start"))
async def start_command(message: Message):

    await bot.send_message(
        config.ADMIN_ID_1,
        f'We have new user @{message.from_user.username}'
    )
    await bot.send_message(
        config.ADMIN_ID_2,
        f'We have new user @{message.from_user.username}'
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [
                KeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                KeyboardButton(text="–û –±–æ—Ç–µ")
            ],
            [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")]
        ],
        resize_keyboard=True
    )
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text='–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥',
        callback_data='get_trial'
    ))

    hello_text = '''
üåê –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫ —Å Nachos Web! üöÄ

üîí –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. \
–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ü–û –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è \
–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã –≤—ã \
–º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–µ \
–±–µ—Å–ø–æ–∫–æ—è—Å—å –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

üí° –ü–æ—á–µ–º—É Nachos?

‚Üí –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
‚Üí –°–≤–æ–±–æ–¥–∞ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü
‚Üí –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Üí –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
‚Üí –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤


üîó –ù–µ –∂–¥–∏—Ç–µ, –∑–∞—â–∏—Ç–∏—Ç–µ —Å–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
'''
    await message.answer(
        hello_text, reply_markup=builder.as_markup()
    )

    # await message.answer(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard
    # )

    await message.answer(reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == 'get_trial')
async def get_trial_callback(callback: CallbackQuery):

    ans_json = await (
        get_data(
            f"""
{os.getenv('GET_TRIAL')}/{callback.from_user.username}+\
{callback.message.chat.id}
"""))
    if ans_json.startswith('Error'):
        await callback.message.answer(
            '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è :)'
        )
        return
    file = await get_file_from_data(
        callback.from_user.username, ans_json
    )
    await callback.message.answer_document(
        FSInputFile(path=f"configs/{file}.conf")
    )

    await callback.message.answer(
        "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø! \
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å \
–≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å!üåù"
    )

    await bot.send_message(
        config.ADMIN_ID_1,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [@{callback.from_user.username}, \
{callback.message.chat.id}] –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç—Ä–∏–∞–ª.'
    )
    await bot.send_message(
        config.ADMIN_ID_2,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [@{callback.from_user.username}, \
{callback.message.chat.id}] –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç—Ä–∏–∞–ª.'
    )

    await callback.answer()


@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
async def installation_guide(message: Message):

    await message.delete()

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–î–ª—è –ü–ö",
        callback_data="instructions_pc")
    )
    builder.add(InlineKeyboardButton(
        text="–î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        callback_data="instructions_mobile")
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "instructions_pc")
async def installation_guide(callback: CallbackQuery):

    await callback.message.delete()

    text = f'''
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard \
[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞]({config.URL})
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WireGuard
'''
    msg1 = await callback.message.answer(
        text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    msg2 = await callback.message.answer_photo(
        FSInputFile(path=f'{config.PHOTO_DIR}/for_pc/0.png'),
        caption="–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard"
    )
    msg3 = await callback.message.answer_photo(
        FSInputFile(path=f'{config.PHOTO_DIR}/for_pc/1.jpg'),
        caption="–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    msg4 = await callback.message.answer_photo(
        FSInputFile(path=f'{config.PHOTO_DIR}/for_pc/2.png'),
        caption="–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ WireGuard"
    )
    await asyncio.sleep(config.SLEEP_TIME)

    await msg1.delete()
    await msg2.delete()
    await msg3.delete()
    await msg4.delete()


@dp.callback_query(F.data == "instructions_mobile")
async def installation_guide(callback: CallbackQuery):

    await callback.message.delete()

    text = f'''
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –≤ \
[AppStore]({config.URL2}) –∏–ª–∏ [Play Market]({config.URL3})
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WireGuard
'''
    msg1 = await callback.message.answer(
        text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )
    media = [
        InputMediaPhoto(
            media=FSInputFile(
                path=f'{config.PHOTO_DIR}/for_mobile/1.jpg'
            ),
            caption="–®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —Å —Ç—É–Ω–Ω–µ–ª–µ–º"
        ),
        InputMediaPhoto(
            media=FSInputFile(
                path=f'{config.PHOTO_DIR}/for_mobile/2.jpg'
            )
        ),
    ]
    msg2 = await callback.message.answer_media_group(media)

    media2 = [
        InputMediaPhoto(
            media=FSInputFile(
                path=f'{config.PHOTO_DIR}/for_mobile/3.jpg'
            ),
            caption="–®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥"
        ),
        InputMediaPhoto(
            media=FSInputFile(
                path=f'{config.PHOTO_DIR}/for_mobile/4.jpg'
            )
        ),
    ]

    msg3 = await callback.message.answer_media_group(media2)

    msg4 = await callback.message.answer_photo(
        FSInputFile(
            path=f'{config.PHOTO_DIR}/for_mobile/5.jpg'
        ),
        caption="–®–∞–≥ 3: –ó–∞–ø—É—Å—Ç–∏—Ç–µ VPN"
    )

    await asyncio.sleep(config.SLEEP_TIME)

    await msg1.delete()
    for msg in msg2:
        await msg.delete()
    for msg in msg3:
        await msg.delete()
    await msg4.delete()


@dp.message(lambda message: message.text == "–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def contacts(message: Message):
    await message.delete()

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ö–æ–Ω—Ç–∞–∫—Ç—ã",
        callback_data="contacts")
    )
    builder.add(InlineKeyboardButton(
        text="FAQ",
        callback_data="questions")
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "questions")
async def contacts(callback: CallbackQuery):

    await callback.message.delete()

    text = '''
    ‚Üí *–ü–æ—á–µ–º—É –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥–≤—É—Ö \
        —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?*\n
–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω WireGuard. \
–£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å \
–æ—Ç –∫–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞—Ç–∞ –µ–º—É –∂–¥–∞—Ç—å —Ç—Ä–∞—Ñ–∏–∫. –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, \
—ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å–∞—Ç, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, \
–∫–æ–≥–¥–∞ –æ–¥–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –¥–≤—É—Ö –∏ –±–æ–ª–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö \
–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–¥—Ä–µ—Å–∞—Ç –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∏ —Å–µ—Ä–≤–µ—Ä \
–Ω–µ –º–æ–∂–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–∑ \
–¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. \
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \
–æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.\n
‚Üí *–ü–æ—á–µ–º—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏ WIFI –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Å—Ä–∞–∑—É?*\n
–°–µ—Ä–≤–µ—Ä—É –Ω—É–∂–Ω–æ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è (21 —Å–µ–∫—É–Ω–¥–∞), —á—Ç–æ–±—ã —É–ª–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π \
–∏–∑–º–µ–Ω–∏–≤—à–∏–π—Å—è –∞–¥—Ä–µ—Å–∞—Ç –∏ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ \
—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞.\n
‚Üí *–£ –º–µ–Ω—è Android, –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å?*\n
–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard, \
—Å–º–µ–Ω–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ (–¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ \
–æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.
'''

    msg = await callback.message.answer(
        text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

    await asyncio.sleep(config.SLEEP_TIME)
    await msg.delete()


@dp.callback_query(F.data == "contacts")
async def contacts(callback: CallbackQuery):
    logger.info(
        "Handling update",
        extra={
            'chat_id': callback.from_user.id,
            'username': callback.from_user.username or "NoUsername"
        }
    )

    await callback.message.delete()

    text = f'''
    –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ [@el_nachoss]({config.CONTACT}). \n
–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: [Nachos VPN News]({config.CONTACT_CHANELL})
'''

    msg = await callback.message.answer(
        text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

    await asyncio.sleep(config.SLEEP_TIME)
    await msg.delete()


@dp.message(lambda message: message.text == "–û –±–æ—Ç–µ")
async def about(message: Message):

    await message.delete()

    text = f'''
    üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã.\n
–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—É—é —Å–µ—Ç—å –≤ —Ä–æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –∑–∞ \
–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–∞–π—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ. –°–µ—Ä–≤–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –õ–∞—Ç–≤–∏–∏ –∏ –ú–æ–ª–¥–æ–≤–µ, —á—Ç–æ \
–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ\n
üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {config.PRICE} —Ä—É–±/–º–µ—Å. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è \
—á–µ—Ä–µ–∑ –Æ–º–∞–Ω–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π.\n
–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–æ—Å. üåù
    '''

    msg = await message.answer(text)
    await asyncio.sleep(config.SLEEP_TIME)
    await msg.delete()


@dp.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def pay_options(message: Message):

    await message.delete()

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å",
        callback_data="choose_tunnel")
    )
    builder.add(InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π",
        callback_data="new_buy")
    )
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥?",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "choose_tunnel")
async def extend_buy_options(callback: CallbackQuery, state: FSMContext):

    await callback.message.delete()

    tunnel_list = await get_tunnel_list(callback.from_user.username)

    if not tunnel_list:
        await callback.message.answer(
            "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å."
        )
        return

    text = '–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å: \n'

    builder = InlineKeyboardBuilder()
    for num, tunnel in enumerate(tunnel_list):
        text += ''.join(
            f'{num + 1}. {tunnel[0]}  |  –°—Ç–∞—Ç—É—Å -'
            f'{tunnel[1]}\n'
        )
        # –¥–æ–ø–∏–ª–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ 3 –≤ –ª–∏–Ω–∏—é
        builder.add(InlineKeyboardButton(
            text=f"{num + 1}",
            callback_data=f"extend_buy:{tunnel[0]}")
        )

        builder.adjust(3)

    await callback.message.answer(text, reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("extend_buy:"))
async def extend_buy_process(callback: CallbackQuery, state: FSMContext):
    # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–∏–ª–∏—Ç—å –ª–æ–≥–∏–∫—É —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    # –ó–∞–Ω–æ–≤–æ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—ã–ª–∞—Ç—å —Å–º—ã—Å–ª–∞ –Ω–µ—Ç.

    await callback.message.delete()

    config_name = callback.data.split(":")[1]

    await state.update_data(config_name=config_name)
    await state.update_data(buy_type='2')

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="buy")
    )
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥ '{config_name}' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
        reply_markup=builder.as_markup()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    # builder = InlineKeyboardBuilder()
    # builder.add(InlineKeyboardButton(
    #     text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
    #     callback_data="check_payment")
    # )
    # await callback.message.answer(
    # "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
    # reply_markup=builder.as_markup()
    # )


@dp.callback_query(F.data == "new_buy")
async def process_new_buy(callback: CallbackQuery, state: FSMContext):

    await callback.message.delete()

    await state.update_data(buy_type='1')
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="buy")
    )
    await callback.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "buy")
async def process_payment(callback: CallbackQuery, state: FSMContext):

    await callback.message.delete()

    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")

    await state.update_data(new_buy_state=0)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()
    payment_id = data.get("payment_id")
    if payment_id:
        payment_info = Payment.find_one(payment_id)
        status = payment_info.status

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if status in {"succeeded", "canceled"}:
            payment = get_payment()
        else:
            payment = payment_info
    else:
        payment = get_payment()

    payment_data = json.loads(payment.json())
    payment_id = payment_data['id']

    await state.update_data(payment_id=payment_id)

    payment_url = (payment_data['confirmation'])['confirmation_url']
    text = f"""–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\
    {payment_url} \


–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
        callback_data="check_payment")
    )
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=text,
        reply_markup=builder.as_markup())


@dp.callback_query(F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º payment_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_id = data.get("payment_id")
    config_name = data.get("config_name")
    buy_type = data.get("buy_type")

    if not payment_id:
        await bot.send_message(
            callback.message.chat.id,
            "–ù–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞."
        )
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    try:
        payment_info = Payment.find_one(payment_id)

        if payment_info.status == "succeeded":
            msg1 = await bot.send_message(
                callback.message.chat.id,
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É."
            )
            if buy_type == '1':
                perm_state = await state.get_data()
                payment_status = perm_state.get('new_buy_state')

                if payment_info.paid:
                    if payment_status == 0:

                        await callback.message.delete()

                        msg2 = await bot.send_message(
                            callback.message.chat.id,
                            '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞'
                        )

                        # –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —é–∑–µ—Ä—É
                        ans_json = await (
                            get_data(
                                f"""
{os.getenv('SET_PEER')}/{callback.from_user.username}+{callback.message.chat.id}
"""
                            )
                        )
                        file = await get_file_from_data(
                            callback.from_user.username, ans_json
                        )
                        await callback.message.answer_document(
                            FSInputFile(path=f"configs/{file}.conf")
                        )
                        await state.update_data(new_buy_state=1)
                        await state.update_data(buy_type="0")
                        await asyncio.sleep(config.SLEEP_TIME)
                        await msg1.delete()
                        await msg2.delete()

                    else:
                        await bot.send_message(
                            callback.message.chat.id,
                            '–ò—â–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤—ã—à–µ :^)'
                        )
            elif buy_type == '2':
                perm_state = await state.get_data()
                payment_status = data.get('new_buy_state')

                if payment_info.paid:
                    if payment_status == 0:

                        # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                        ans_json = await (
                            get_data(
                                f"""
{config.EXTEND_PEER}/{config_name.split('-')[0]}
"""
                            )
                        )

                        if ans_json['Message'].startswith(
                            '1 Month added successfully'
                        ):

                            await callback.message.delete()

                            msg2 = await bot.send_message(
                                callback.message.chat.id,
                                '–¢—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!'
                            )

                            await asyncio.sleep(config.SLEEP_TIME)
                            await msg1.delete()
                            await msg2.delete()

                        else:
                            await bot.send_message(
                                callback.message.chat.id,
                                '–ï—Å–ª–∏ –í—ã –≤–∏–¥–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ –æ–æ–±—â–µ–Ω–∏–µ, \
                                —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É :/'
                            )
                        await state.update_data(buy_type="0")
                        await state.update_data(new_buy_state=1)

                    else:
                        await bot.send_message(
                            callback.message.chat.id, '–ò—â–∏—Ç–µ –∏–Ω—Ñ—É –≤—ã—à–µ :^)'
                        )

        elif payment_info.status in ["pending", "waiting_for_capture"]:
            await bot.send_message(
                callback.message.chat.id,
                "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, \
                    –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=str(payment_info.status)
            )
        else:
            await bot.send_message(
                callback.message.chat.id,
                f"""
                –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º. –°—Ç–∞—Ç—É—Å: {payment_info.status}. \
                –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
                """
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            callback.message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# echo bot
@dp.message(F.text)
async def echo(message: Message):
    sent_message = await message.answer(message.text)
    await message.delete()
    await asyncio.sleep(10)
    await sent_message.delete()


async def main():
    await dp.start_polling(bot)
    await set_commands()


if __name__ == "__main__":

    # logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'{config.BASE_DIR}/logs/main.log'),
            logging.StreamHandler()
        ]
    )

    logger = logging.getLogger(__name__)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°—Ç—Ä—É—è—á–∏–º.")

    asyncio.run(main())
