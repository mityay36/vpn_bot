import asyncio
import json
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from yookassa import Payment, Configuration

import config
from logic import get_tunnel_list, get_payment, get_data, get_file_from_data


# log
logging.basicConfig(level=logging.INFO)

# init
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()

Configuration.account_id = config.MARKET_ID
Configuration.secret_key = config.YOKASSA_API_KEY


@dp.message(Command("start"))
async def start_command(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="–û –±–æ—Ç–µ")],
            [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")]
        ],
        resize_keyboard=True
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
async def installation_guide(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–ª—è –ü–ö",
        callback_data="instructions_pc")
    )
    builder.add(types.InlineKeyboardButton(
        text="–î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        callback_data="instructions_mobile")
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "instructions_pc")
async def installation_guide(callback: types.CallbackQuery):
    text = f'''
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard
[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞]({config.URL})
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WireGuard
'''
    await callback.message.answer(text, parse_mode='Markdown')
    await callback.message.answer_photo(
        FSInputFile(path='photos/for_pc/0.png'),
        caption="–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard"
    )
    await callback.message.answer_photo(
        FSInputFile(path='photos/for_pc/1.jpg'),
        caption="–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    await callback.message.answer_photo(
        FSInputFile(path='photos/for_pc/2.png'),
        caption="–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ WireGuard"
    )

@dp.callback_query(F.data == "instructions_mobile")
async def installation_guide(callback: types.CallbackQuery):
    text = f'''
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard –≤ *AppStore* –∏–ª–∏ *Play Market*
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WireGuard
'''
    await callback.message.answer(text, parse_mode='Markdown')
    media = [
        InputMediaPhoto(media=FSInputFile(path='photos/for_mobile/1.jpg'),caption="–®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª —Å —Ç—É–Ω–Ω–µ–ª–µ–º"),
        InputMediaPhoto(media=FSInputFile(path='photos/for_mobile/2.jpg')),
    ]
    await callback.message.answer_media_group(media)

    media2 = [
        InputMediaPhoto(media=FSInputFile(path='photos/for_mobile/3.jpg'),caption="–®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥"),
        InputMediaPhoto(media=FSInputFile(path='photos/for_mobile/4.jpg')),
    ]

    await callback.message.answer_media_group(media2)

    await callback.message.answer_photo(
        FSInputFile(path='photos/for_mobile/5.jpg'),
        caption="–®–∞–≥ 3: –ó–∞–ø—É—Å—Ç–∏—Ç–µ VPN"
    )


@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    text = f'''
    –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @{config.CONTACT}
    '''
    await message.answer(text)


@dp.message(lambda message: message.text == "–û –±–æ—Ç–µ")
async def about(message: Message):
    text = f'''
    üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã.\n
–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—É—é —Å–µ—Ç—å –≤ —Ä–æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –∑–∞ \
    –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–∞–π—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ. –°–µ—Ä–≤–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –õ–∞—Ç–≤–∏–∏ –∏ –ú–æ–ª–¥–æ–≤–µ, —á—Ç–æ \
    –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ\
    \n
üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {config.PRICE} —Ä—É–±/–º–µ—Å. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è \
    —á–µ—Ä–µ–∑ –Æ–º–∞–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.

–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–æ—Å. üåù
    '''
    await message.answer(text)


@dp.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def pay_options(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å",
        callback_data="choose_tunnel")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π",
        callback_data="new_buy")
    )
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥?",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "choose_tunnel")
async def extend_buy_options(callback: types.CallbackQuery, state: FSMContext):

    tunnel_list = await get_tunnel_list(callback.from_user.username)
    
    if not tunnel_list:
        await callback.message.answer("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å.")
        return
    
    text = '–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å: \n'
    
    builder = InlineKeyboardBuilder()
    for num, tunnel in enumerate(tunnel_list):
        text += ''.join(
            f'{num + 1}. {tunnel[0]}  |  –°—Ç–∞—Ç—É—Å -'
            f'{tunnel[1]}\n'
        )
        # –¥–æ–ø–∏–ª–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ 3 –≤ –ª–∏–Ω–∏—é
        builder.add(types.InlineKeyboardButton(
            text=f"{num + 1}",
            callback_data=f"extend_buy:{tunnel[0]}")
        )

        builder.adjust(3)

    await callback.message.answer(text, reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("extend_buy:"))
async def extend_buy_process(callback: types.CallbackQuery, state: FSMContext):
    # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–∏–ª–∏—Ç—å –ª–æ–≥–∏–∫—É —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–Ω–æ–≤–æ –∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—ã–ª–∞—Ç—å —Å–º—ã—Å–ª–∞ –Ω–µ—Ç.
    
    config_name = callback.data.split(":")[1]

    await state.update_data(config_name=config_name)
    await state.update_data(buy_type='2')

    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="buy")
    )
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥ '{config_name}' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", reply_markup=builder.as_markup())


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    # builder = InlineKeyboardBuilder()
    # builder.add(types.InlineKeyboardButton(
    #     text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
    #     callback_data="check_payment")
    # )
    # await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", reply_markup=builder.as_markup())


@dp.callback_query(F.data == "new_buy")
async def process_new_buy(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(buy_type='1')
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="buy")
    )
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.", reply_markup=builder.as_markup())



@dp.callback_query(F.data == "buy")
async def process_payment(callback: types.CallbackQuery, state: FSMContext):

    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")

    await state.update_data(new_buy_state=0)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()
    payment_id = data.get("payment_id")
    if payment_id:
        payment_info = Payment.find_one(payment_id)
        status = payment_info.status
    
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if status in {"succeeded", "canceled"}:
            payment = get_payment()
        else:
            payment = payment_info
    else: 
        payment = get_payment()

    payment_data = json.loads(payment.json())
    payment_id = payment_data['id']

    await state.update_data(payment_id=payment_id)

    payment_url = (payment_data['confirmation'])['confirmation_url']
    text = f"""–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\
    {payment_url} \

        
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
        callback_data="check_payment")
    )
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=text,
        reply_markup=builder.as_markup())


@dp.callback_query(F.data == "check_payment")
async def check_payment(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º payment_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_id = data.get("payment_id")
    config_name = data.get("config_name")
    buy_type= data.get("buy_type")



    if not payment_id:
        await bot.send_message(callback.message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    try:
        payment_info = Payment.find_one(payment_id)

        if payment_info.status == "succeeded":
            await bot.send_message(
                callback.message.chat.id,
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É."
            )
            if buy_type == '1':
                perm_state = await state.get_data()
                payment_status = perm_state.get('new_buy_state')

                if payment_info.paid:
                    if payment_status == 0:
                        await bot.send_message(callback.message.chat.id, '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞')
                        
                        # –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥–∞ —é–∑–µ—Ä—É
                        ans_json = await (get_data(
                            f"{os.getenv('SET_PEER')}/{callback.from_user.username}"))
                        file = await get_file_from_data(callback.from_user.username, ans_json)
                        await callback.message.answer_document(FSInputFile(path=f"configs/{file}.conf"))
                        await state.update_data(new_buy_state=1)
                        await state.update_data(buy_type="0")

                    else:
                        await bot.send_message(callback.message.chat.id, '–ò—â–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –≤—ã—à–µ :^)')
                        # –∑–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            elif buy_type == '2':
                perm_state = await state.get_data()
                payment_status = data.get('new_buy_state')

                if payment_info.paid:
                    if payment_status == 0:

                        # –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                        ans_json = await (get_data(
                            f"{config.EXTEND_PEER}/{config_name.split('-')[0]}"))
                        
                        if ans_json['Message'].startswith('1 Month added successfully'):
                            await bot.send_message(callback.message.chat.id, '–¢—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!')
                        else:
                            await bot.send_message(callback.message.chat.id, '–ï—Å–ª–∏ –í—ã –≤–∏–¥–∏—Ç–µ –¥–∞–Ω–Ω–æ–µ –æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É :/')
                        
                        await state.update_data(buy_type="0")
                        await state.update_data(new_buy_state=1)


                    else:
                        await bot.send_message(callback.message.chat.id, '–ò—â–∏—Ç–µ –∏–Ω—Ñ—É –≤—ã—à–µ :^)')


        elif payment_info.status in ["pending", "waiting_for_capture"]:
            await bot.send_message(
                callback.message.chat.id,
                "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=str(payment_info.status)
            )
        else:
            await bot.send_message(
                callback.message.chat.id,
                f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º. –°—Ç–∞—Ç—É—Å: {payment_info.status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(
            callback.message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# echo bot
@dp.message(F.text)
async def echo(message: types.Message):
    await message.answer(message.text)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
