import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config


# log
logging.basicConfig(level=logging.INFO)

# init
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="–û –±–æ—Ç–µ")],
            [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")]
        ],
        resize_keyboard=True
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
async def help_command(message: Message, state: FSMContext):
    text = f'''
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard
[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞]({config.URL})
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ WireGuard
'''
    await message.answer(text, parse_mode='Markdown')
    await message.answer_photo(
        FSInputFile(path='photos/0.png'),
        caption="–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard"
    )
    await message.answer_photo(
        FSInputFile(path='photos/1.jpg'),
        caption="–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    await message.answer_photo(
        FSInputFile(path='photos/2.png'),
        caption="–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ WireGuard"
    )


@dp.message(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    text = f'''
    –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @{config.CONTACT}
    '''
    await message.answer(text)


@dp.message(lambda message: message.text == "–û –±–æ—Ç–µ")
async def about(message: Message):
    text = f'''
üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã - –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã.
–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—É—é —Å–µ—Ç—å –≤ —Ä–æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –∑–∞ \
–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–∞–π—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ. –°–µ—Ä–≤–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –õ–∞—Ç–≤–∏–∏, —á—Ç–æ \
–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ üöÄ

üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {config.PRICE} —Ä—É–±/–º–µ—Å. –û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ \
–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤ –±–æ—Ç–µ, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–≤ –ª–∏—á–Ω–æ –Ω–∞–º.

–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–æ—Å. üåù
    '''
    await message.answer(text)


# @dp.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
# async def buy(message: types.Message):
#     if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
#         await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")
#
#     await bot.send_invoice(message.chat.id,
#                            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN",
#                            description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
#                            provider_token=config.PAYMENTS_TOKEN,
#                            currency="rub",
#                            is_flexible=False,
#                            prices=[config.PRICE_LABELED],
#                            start_parameter="one-month-subscription",
#                            payload="test-invoice-payload")


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message(lambda message: message.successful_payment is not None)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment = message.successful_payment
    if payment:
        payment_info = message.successful_payment.as_dict()
        for k, v in payment_info.items():
            print(f"{k} = {v}")
        await bot.send_message(
            message.chat.id,
            f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}\
{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ."
        )

        # –¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—É—Å–æ–∫ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –µ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º.

        await bot.send_message(message.chat.id, '–ü—É-–ø—É-–ø—É...')
    else:
        print(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ò–Ω—Ñ–æ—Ä–º–∞–º—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ - {payment}')
        await bot.send_message(
            message.chat.id,
            f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û—Ç–≤–µ—Ç - {payment}'
        )


@dp.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def cmd_random(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–ª–∏—Ç—å",
        callback_data="extend_buy")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π",
        callback_data="new_buy")
    )
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥?",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "extend_buy")
async def send_random_value(callback: types.CallbackQuery):
    # —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —Ç—É–Ω–Ω–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ tunnel_list

    tunnel_list = [('urmomgay_wg0', 'alive'), ('vasya1_wg0', 'dead'), ('remotecontrol_of_america_wg0', 'dead')]
    text = '–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å: \n'
    alive_emoji = 'üü¢'
    dead_emoji = 'üî¥'
    builder = InlineKeyboardBuilder()
    for num, tunnel in enumerate(tunnel_list):

        text += ''.join(f'{num+1}. {tunnel[0]}  |  –°—Ç–∞—Ç—É—Å - {alive_emoji if tunnel[1] == "alive" else dead_emoji}\n')

        builder.add(types.InlineKeyboardButton(
            text=f"{num+1}",
            callback_data="extend_buy_2")
        )

    await callback.message.answer(text, reply_markup=builder.as_markup())


@dp.callback_query(F.data == "new_buy")
async def process_payment(callback: types.CallbackQuery):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")

    await bot.send_invoice(callback.message.chat.id,
                           title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[config.PRICE_LABELED],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")


# echo bot
@dp.message(F.text)
async def echo(message: types.Message):
    await message.answer(message.text)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
